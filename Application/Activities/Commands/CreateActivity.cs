using System;
using Domain;
using MediatR;
using Persistence;

namespace Application.Activities.Commands;

public class CreateActivity
{
    // returns string id
    public class Command : IRequest<string>
    {
        public required Activity Activity { get; set; }
    }

    // This Handler handles requests of type CreateActivity.Command.
    public class Handler(AppDbContext context) : IRequestHandler<Command, string>
    {
        public async Task<string> Handle(Command request, CancellationToken cancellationToken)
        {
            // not accessing the database to get value generated by the database, dont use AddAsync.
            context.Activities.Add(request.Activity);

            // .Add() doesn't immediately write to the database, it tells EF's DbContext to mark the request.Activity object in an "Added" state.
            // SaveChangesAsync makes EF execute SQL query to add request.Activity.
            await context.SaveChangesAsync(cancellationToken);

            // After SaveChangesAsync completes, EF update the request.Activity with Id generated by the database.
            // return Activity Id to use in the client side.
            return request.Activity.Id;
        }
    }
}
